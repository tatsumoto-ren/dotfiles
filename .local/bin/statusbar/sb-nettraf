#!/bin/bash

# Module showing network traffic. Shows how much data has been received (RX) or
# transmitted (TX) since the previous time this script ran. So if run every
# second, gives network traffic per second.

readonly cache_fol="/tmp/${0##*/}"
mkdir -p "$cache_fol"

local_info() {
	sb-local_ipaddr | head -1
}

public_info() {
	curl -s 'https://ifconfig.co/json' | sed -n \
		-e 's/\"//g;' \
		-e 's/,$//g;' \
		-e 's/^ *//g;' \
		-e '2s/ip/Public/p;' \
		-e '4s/^c/C/p;' \
		-e '7s/region_name/City/p;'
}

update() {
	local sum=0 old=0
	local -r cache_file="${cache_fol}/${1##*/}"
	for arg; do
		read -r i <"$arg"
		sum=$((sum + i))
	done
	unset arg
	[ -f "$cache_file" ] && read -r old <"$cache_file" || old=0
	printf -- '%d\n' "$sum" >"$cache_file"
	printf -- '%d\n' "$(((sum - old) / ${interval:-1}))"
}

case "$BLOCK_BUTTON" in
1)
	notify-send " Connection info" "$(local_info)\\n$(public_info)" &
	;;
2)
	setsid -f "$TERMINAL" -e bmon &
	;;
6)
	setsid -f "$TERMINAL" -e "$EDITOR" "$0"
	;;
esac

readonly rx=$(update /sys/class/net/[ew]*/statistics/rx_bytes)
readonly tx=$(update /sys/class/net/[ew]*/statistics/tx_bytes)
readonly in=$(numfmt --to=iec "$rx")
readonly out=$(numfmt --to=iec "$tx")

if [ "$rx" -ge 0 ] && [ "$tx" -ge 0 ]; then
	printf -- 'IN %s OUT %s\n %s  %s\n' "$in" "$out" "$in" "$out"
fi
