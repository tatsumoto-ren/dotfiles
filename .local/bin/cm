#!/bin/bash

# A collection of media editing scripts

# if set globally, respect the values
readonly OPUS_Q=${OPUS_Q:-32k}
readonly WEBP_Q=${WEBP_Q:-5}
readonly WEBP_RESIZE=${WEBP_RESIZE:-200}
# https://trac.ffmpeg.org/wiki/Encode/MP3
# 0 = max(up to 260 kbit/s)
readonly MP3_Q=${MP3_Q:-6}

anki_username() {
	xdotool search --class 'anki' |
		xargs -I{} xdotool getwindowname {} |
		grep -oP '^(.+)(?= - Anki$)'
}

collection_path() {
	echo "$HOME/.local/share/Anki2/$(anki_username)/collection.media"
}

check_anki_col_available() {
	if ! [[ -d ${COL_FOL:=$(collection_path)} ]]; then
		echo "Couldn't find Anki user. Maybe Anki isn't running."
		exit 1
	fi
}

_cwebp_alpha() { cwebp -short -sharp_yuv -af -pass 10 -m 6 -mt -sns 100 -f 100 "$@"; }
_cwebp() { cwebp -blend_alpha '0xffffff' -alpha_q 0 -short -sharp_yuv -af -pass 10 -m 6 -mt -sns 100 -f 100 "$@"; }
_ffmpeg() { ffmpeg -nostdin -hide_banner -loglevel info "$@"; }
_findall() { find . -mindepth 1 -maxdepth 1 -type f "$@" -print0; }
_xargs() { xargs -0 -P "$(nproc)" -I {} "$@"; }

# Convert a file to webp, specify target size
stwebp() {
	[[ ! -f $1 ]] && return 1
	[[ $1 == *.gif ]] && unset -f _cwebp && _cwebp() { gif2webp -mt -lossy -m 6 -min_size -metadata none "$@"; }
	_cwebp "$1" -resize 0 "${WEBP_RESIZE:?}" -q "${WEBP_Q:?}" -o "${1%.*}.webp"
}

# Convert a file to webp, specify target quality
twebp() {
	[[ ! -f $1 ]] && return 1
	[[ $1 == *.gif ]] && unset -f _cwebp && _cwebp() { gif2webp -mt -lossy -m 6 -min_size -metadata none "$@"; }
	_cwebp "$1" -q "${2:-$WEBP_Q}" -o "${1%.*}.webp"
}

lossless() {
	[[ ! -f $1 ]] && return 1
	[[ $1 == *.gif ]] && return 1
	_cwebp "$1" -q 100 -lossless -o "${1%.*}.webp"
}

lossless_alpha() {
	[[ ! -f $1 ]] && return 1
	[[ $1 == *.gif ]] && return 1
	_cwebp_alpha "$1" -q 100 -lossless -o "${1%.*}.webp"
}

readonly af_filters="
	areverse,
	silenceremove=start_periods=1:start_duration=0.02:start_silence=0.04:start_threshold=-50dB,
	areverse,
	silenceremove=start_periods=1:start_duration=0.02:start_silence=0.04:start_threshold=-50dB,
	loudnorm=I=-16:TP=-6.2:LRA=11:dual_mono=true,
"

# Convert a file to ogg/opus
# reads OPUS_Q variable
togg() {
	[[ ! -f $1 ]] && return 1
	_ffmpeg \
		-vn \
		-sn \
		-y \
		-i "$1" \
		-acodec libopus \
		-map_metadata -1 \
		-ac 1 \
		-ab "${2:-$OPUS_Q}" \
		-vbr on \
		-compression_level 10 \
		-application voip \
		-af "$af_filters" \
		"${1%.*}.ogg"
}

# Convert a file to mp3
# reads MP3_Q variable
tomp3() {
	[[ ! -f $1 ]] && return 1
	_ffmpeg \
		-vn \
		-sn \
		-y \
		-i "$1" \
		-codec:a libmp3lame \
		-qscale:a "$MP3_Q" \
		-map_metadata -1 \
		-ac 1 \
		-af "$af_filters" \
		"${1%.*}.mp3"
}

# Can be added to ~/.config/Thunar/uca.xml
thunar_action_convert_to_webp() {
	command -v zenity || return 1
	local quality

	quality=$(zenity --scale --text="Quality" --value="5" \
		--min-value="0" --max-value="25" --step="1")

	[[ -z "$quality" ]] && quality=10

	twebp "$1" "$quality"
}

# Extract subs from MKV
extsub() { _ffmpeg -vn -an -i "$1" "${1%.*}.en.ass"; }

# Convert a folder to webp
ftwebp() { _findall -iregex '.*\.\(jpg\|jpeg\|png\|gif\)' | _xargs cm twebp {}; }

# Convert a folder to a small webp
ftswebp() { _findall -iregex '.*\.\(jpg\|jpeg\|png\|gif\)' | _xargs cm stwebp {}; }

# Convert a folder to ogg/opus
ftogg() { _findall -iregex '.*\.\(mp3\|flac\|aac\|wav\|webm\)' | _xargs cm togg {}; }

# Convert a folder to mp3
ftomp3() { _findall -iregex '.*\.\(ogg\|flac\|aac\|wav\|webm\)' | _xargs cm tomp3 {}; }

# Extract subs from all mkv files in a folder.
fextsub() { _findall -iname '*.mkv' | _xargs cm extsub {}; }

check() { ls -1 ./*.mp3 ./*.jpg ./*.png; }

striptags() {
	find . -iname '*.srt' -print0 | xargs -0 -I{} sed -i 's/<font[^>]*>//g;s/<\/font>//g' {}
}

# Convert youtube vtt subs to srt
vtt2srt() {
	for file in ./*.vtt; do
		_ffmpeg -vn -an -i "$file" "${file%.vtt}.srt"
	done
	rm -v ./*.vtt
}

# Manually edit audio file in Audacity, then move back to Anki collection
edit() {
	check_anki_col_available

	local -r filename="$(echo "$1" | sed 's/^\[sound://; s/\]$//')"
	local -r filepath="$COL_FOL/$filename"
	local -r workdir="/tmp/audacity"
	mkdir -- "$workdir"
	[[ -f $filepath ]] && cd "$workdir" || return 1

	audacity "$filepath" &>/dev/null

	if ! ls ./*.*; then
		echo "Aborted."
		return
	fi

	ftogg
	ls -1
	cp -v ./*.ogg "$COL_FOL"
	rm -rfv "$workdir"
}

# Move all files in the current directory to the anki collection
moveall() {
	check_anki_col_available

	mv -v ./* "$COL_FOL"
}

# Convert media files in a subs2srs folder and move them to the anki collection
doall() {
	mp3gain -f -q -r -k ./*.mp3
	cm ftogg
	cm ftswebp
	rm ./*.mp3
	rm ./*.jpg
	moveall
}

# Autorename files in the current dir
seqrename() {
	local i=1
	for file in ./*.*; do
		if [[ -f "$file" ]]; then
			mv -nv "$file" "$(printf -- '%010d' "${i}").${file##*.}"
			i=$((i + 1))
		fi
	done
}

# Entry point

if [[ "$1" ]] && declare -f "$1" >/dev/null; then
	# call arguments verbatim
	"$@"
else
	# Show a helpful error
	echo "'${1-nothing}' is not a known function name" >&2
	echo "Available functions:"
	declare -F | cut -f3 -d' ' | grep '^[a-z]'
	exit 1
fi
