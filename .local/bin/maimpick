#!/bin/bash

set -euo pipefail

readonly anki_image_field=${MAIMPICK_ANKI_FIELD:-Image}
readonly selections_cache=$HOME/.cache/previous_selections

take_screenshot() {
	maim --hidecursor --format=png --quality 10 "$@"
}

ask_command() {
	dmenu -l 30 -i -p 'Screenshot which area?' <<-EOF
		selected area
		selected area → clipboard
		selected area → gimp
		selected area → Anki
		selected area → Tesseract OCR
		selected area → Transformers OCR
		current window
		current window → clipboard
		full screen
		full screen → clipboard
	EOF
}

notify() {
	echo "$*"
	notify-send "Maim Pick" "$*" &
}

if_installed() {
	for x in "$@"; do
		if ! which "$x" >/dev/null 2>&1 && ! pacman -Qq "$x" >/dev/null 2>&1; then
			notify "$x must be installed for this function."
			return 1
		fi
	done
}

xclip_png() {
	xclip -selection clipboard -t image/png
}

cleanup_after() {
	{ sleep "${1:?Delay is not set.}" && rm -- "${2:?File path is not set.}"; } &
}

ankiconnect_request() {
	curl --silent localhost:8765 -X POST -d "${1:?}"
}

anki_last_added_note() {
	ankiconnect_request '{
		"action": "findNotes",
		"params": {
			"query": "added:1"
		},
		"version": 6
	}' | grep -Po '\[\K[0-9, ]+(?=\])' | sed 's|, |\n|g' | sort -g | tail -1
}

anki_select_note() {
	local request='{
		"action": "guiBrowse",
		"version": 6,
		"params": {
			"query": "nid:<QUERY>"
		}
	}'
	ankiconnect_request "${request/<QUERY>/$1}"
}

anki_store() {
	local -r path=${1:?} name=${2:?}
	local request='{
		"action": "storeMediaFile",
		"version": 6,
		"params": {
			"filename": "<NAME>",
			"path": "<PATH>"
		}
	}'
	request=${request//<NAME>/$name}
	request=${request//<PATH>/$path}
	ankiconnect_request "$request"
}

anki_update_note() {
	local -r note_id=${1:?} field=${2:?} new_content=${3:?}
	local request='{
		"action": "updateNoteFields",
		"version": 6,
		"params": {
			"note": {
				"id": <NOTE_ID>,
				"fields": {
					"<FIELD>": "<NEW_CONTENT>"
				}
			}
		}
	}'
	request=${request//<NOTE_ID>/$note_id}
	request=${request//<FIELD>/$field}
	request=${request//<NEW_CONTENT>/$new_content}
	ankiconnect_request "$request"
}

anki_note_content() {
	local -r note_id=${1:?} field=${2:?}
	local request='{
		"action": "notesInfo",
		"version": 6,
		"params": {
			"notes": [<NOTE_ID>]
		}
	}'
	ankiconnect_request "${request/<NOTE_ID>/$note_id}" |
		grep -Po "\"$field\":\s*{\"value\":\s*\"\K.*?(?=\",)"
}

_cwebp() { cwebp -blend_alpha '0xffffff' -alpha_q 0 -short -sharp_yuv -af -pass 10 -m 6 -mt -sns 100 -f 100 "$@"; }

_cut() {
	awk -F 'x|@' "-vfield=$1" '{print $field }' <<<"${2:?No string specified.}"
}

ask_size_quality() {
	{
		tac "$selections_cache" || true
		cat <<-EOF
			0x250@0
			0x250@1
			0x250@5
			0x350@5
			0x0@100
		EOF
	} | sort -u | head -10 | dmenu -i -p "Size and quality"
}

convert_image() {
	# 1=source, 2=dest, 3={w}x{h}@{q}
	_cwebp \
		-o "$2" \
		-resize "$(_cut 1 "$3")" "$(_cut 2 "$3")" \
		-q "$(_cut 3 "$3")" \
		-- "$1"
}

main() {
	if_installed dmenu maim xdotool || exit 1

	local -r screenshot_dir=${MAIM_SCREENSHOTS:-$HOME/Pictures/Screenshots}
	local -r file_path=$screenshot_dir/screenshot-$(date --utc '+%F-%H-%M-%S').png

	mkdir -p -- "$screenshot_dir"

	if (($# == 0)) || [[ -z $1 ]]; then
		local -r command=$(ask_command)
	else
		local -r command=$1
	fi

	case $command in
	*area*clipboard)
		take_screenshot -s | xclip_png
		notify "Area copied to the clipboard."
		;;
	*area*gimp)
		take_screenshot -s "$file_path"
		gimp "$file_path"
		cleanup_after "60s" "$file_path"
		;;
	*area*Anki)
		local -r target_note=$(anki_last_added_note)
		if [[ -z $target_note ]]; then
			notify "No selected note."
			return
		fi
		take_screenshot -s "$file_path"
		local -r size_quality=$(ask_size_quality) webp_path=${file_path%.*}.webp
		if [[ -z $size_quality ]]; then
			notify "Aborted."
			return
		fi
		anki_select_note "0"
		echo "$size_quality" >>"$selections_cache"
		convert_image "$file_path" "$webp_path" "$size_quality"
		anki_store "$webp_path" "$(basename -- "$webp_path")"
		local -r prev_content=$(anki_note_content "$target_note" "$anki_image_field")
		local -r new_content="<img src=\\\"$(basename -- "$webp_path")\\\">"
		anki_update_note "$target_note" "$anki_image_field" "${prev_content}${new_content}"
		anki_select_note "$target_note" &
		notify "Added. File size: $(("$(stat --format='%s' "$webp_path")" / 1024)) KiB"
		cleanup_after "3s" "$file_path"
		cleanup_after "3s" "$webp_path"
		;;
	*area*Tesseract*)
		if which maimocr; then
			exec maimocr
		else
			notify "Can't find maimocr."
		fi
		;;
	*area*Transformers*)
		if which transformers_ocr; then
			exec transformers_ocr recognize
		else
			notify "Can't find transformers-ocr."
		fi
		;;
	*area)
		take_screenshot -s "$file_path"
		notify "Area captured."
		;;
	*window*clipboard)
		take_screenshot -B -i "$(xdotool getactivewindow)" | xclip_png
		notify "Area copied."
		;;
	full*clipboard)
		take_screenshot | xclip_png
		notify "Window copied."
		;;
	*window)
		take_screenshot -B -i "$(xdotool getactivewindow)" "$file_path"
		notify "Window captured."
		;;
	full*)
		take_screenshot "$file_path"
		notify "Whole screen captured."
		;;
	*)
		notify "No appropriate action."
		exit 1
		;;
	esac
}

main "$@"
