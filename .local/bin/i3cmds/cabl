#!/usr/bin/env bash

# Cabl for AJATTers.
# Original concept: https://odysee.com/@Luke:7/plumbing-in-linux-la-plan-9-from-bell:e

# Dependencies are xclip and xorg-xprop.
# qrencode required for qrcode generation.
# groff/zathura required for man pages.

readonly tmp_dir=/tmp/cabl && mkdir -p -- "$tmp_dir"
readonly BROWSER=${BROWSER:-xdg-open}
readonly ANKI_MODEL=${ANKI_MODEL:-Japanese sentences}
readonly ANKI_SENTENCE_FIELD=${ANKI_SENTENCE_FIELD:-SentKanji}

__strip() {
	sed -e 's/^ *//; s/ *$//;' -e 's/▼//g' -e 's/△//g'
}

# If you run `cabl clip`, reads from the clipboard instead.
if [[ $1 == clip* ]]; then
	search_text="$(xclip -o -selection clipboard | __strip)"
else
	search_text="$( { xclip -o || xclip -o -selection clipboard; } | __strip)"
fi
readonly search_text

# Guess search locale
if echo "$search_text" | grep -q '[А-Яа-я]'; then
	readonly locale=ru
elif echo "$search_text" | grep -q '[A-Za-z]'; then
	readonly locale=en
else
	readonly locale=ja
fi

__report_err() {
	echo "$*" >&2
	notify-send "${0##*/}" "$*" &
	return 1
}

__ankiconnect_request() {
	curl -fsS '127.0.0.1:8765' -X POST -d "$1"
}

__anki_store_file() {
	local -r path=${1:?}
	local -r name=${2:?}
	local output=""
	local request='{
		"action": "storeMediaFile",
		"version": 6,
		"params": {
			"filename": "<name>",
			"path": "<path>"
		}
	}'
	request=${request/<name>/$name}
	request=${request/<path>/$path}
	output=$(__ankiconnect_request "$request" 2>&1) || __report_err "$output"
}

__escape_json() {
	local text=$1
	text=${text//'"'/'&quot;'}
	text=${text//$'\n'/'<br>'}
	echo "$text"
}

__convert_to_opus() {
	local -r input=${1:?} output=${2:?} bitrate=32k
	local -r silence_remove="
		areverse,
		silenceremove=start_periods=1:start_duration=0.02:start_silence=0.04:start_threshold=-48dB,
		areverse,
		silenceremove=start_periods=1:start_duration=0.02:start_silence=0.04:start_threshold=-48dB,
		"
	ffmpeg -vn -nostdin -hide_banner -loglevel fatal -y -i "$input" \
		-map_metadata -1 -acodec libopus -ac 1 -ab "$bitrate" -af "$silence_remove" \
		-vbr on -compression_level 10 -application voip "$output"
}

__find_mecab() {
	{
		which mecab --skip-functions --skip-alias
		find ~/.local/share/Anki2/addons21 -type f -name mecab.lin -o -name mecab
	} | head -1
}

__find_mecab_dicrc() {
	find /usr/lib/mecab/ ~/.local/share/Anki2/addons21 -type f -name dicrc -print -quit
}

forvodl() {
	local -r searchterm="$*" format="ogg"
	local -ra headers=(
		-H 'Host: forvo.com'
		-H 'User-Agent: Mozilla/5.0 (Windows NT 10.0; rv:114.0) Gecko/20100101 Firefox/114.0'
		-H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8'
		-H 'Accept-Language: en-US,en;q=0.5'
		-H 'DNT: 1'
		-H 'Connection: keep-alive'
		-H 'Upgrade-Insecure-Requests: 1'
		-H 'Sec-Fetch-Dest: document'
		-H 'Sec-Fetch-Mode: navigate'
		-H 'Sec-Fetch-Site: none'
		-H 'Sec-Fetch-User: ?1'
	)

	get_forvo_audio_url() {
		local -r searchterm="${*:?}"
		local -r play_field=$([[ ${format:?} == 'mp3' ]] && echo 2 || echo 3)
		curl -Ls "${headers[@]}" "https://forvo.com/search/$searchterm/" |
			grep -oP -m 1 "(?<=Play\()[^)>]+(?=\))" |
			cut -d, -f"$play_field" |
			tr -d \' |
			base64 -d |
			sed "s|^|https://audio00.forvo.com/$format/|"
	}

	pronunciation_forvo() {
		local -r searchterm="$*"
		local -r filename="forvo_${searchterm}.${format}"
		local -r audio_url=$(get_forvo_audio_url "$searchterm")

		[[ -n "$audio_url" ]] &&
			curl "$audio_url" -s -L -o "$tmp_dir/tmp_$filename" &&
			__convert_to_opus "$tmp_dir/tmp_$filename" "$tmp_dir/$filename" &&
			__anki_store_file "$tmp_dir/$filename" "$filename" >/dev/null &&
			echo "[sound:$filename]"
	}

	local -r audiofiles="$(pronunciation_forvo "$searchterm")"
	if [ -z "$audiofiles" ]; then
		notify-send "${0##*/} - ${FUNCNAME[0]}" "Couldn't find anything matching $searchterm." &
		return 1
	else
		echo -n "$audiofiles" | xclip -selection clipboard
		notify-send "${0##*/} - ${FUNCNAME[0]}" "File(s) added to Anki collection. Codes are copied to the clipboard." &
	fi
}

if [[ $locale == ja ]]; then
	show_headwords() {
		# split sentence with mecab, show a list of headwords. copy selected to the clipboard.
		# requires AJT Japanese or Japanese Support to be installed.
		"$(__find_mecab)" \
			-d "$(dirname -- "$(__find_mecab_dicrc)")" \
			--node-format='%f[6]\n' \
			--eos-format='\n' \
			--unk-format='\n' <<< "$*" |
			sed '/^ *$/d' |
			{ dmenu || echo "$*" ;} |
			tee >(xclip) |
			xclip -selection clipboard
	}
	longman() { "$BROWSER" "https://www.ldoceonline.com/search/japanese-english/direct/?q=$*"; }
	aozora_search() { "$BROWSER" "https://myokoym.net/aozorasearch/search?word=$*"; }
	forvo() { "$BROWSER" "https://forvo.com/search/$*/"; }
	weblio_sentences() { "$BROWSER" "https://ejje.weblio.jp/sentence/content/$*"; }
	captionpop() { "$BROWSER" "https://www.captionpop.com/search?nl=en&tl=ja&filter=target&q=$*"; }
	weblio() { "$BROWSER" "https://www.weblio.jp/content/$*"; }
	weblio_synonyms() { "$BROWSER" "https://thesaurus.weblio.jp/content/$*"; }
	wadoku() { "$BROWSER" "https://www.wadoku.de/search/$*"; }
	kotobank() { "$BROWSER" "https://kotobank.jp/gs/?q=$*"; }
	sakuraparis() { "$BROWSER" "https://sakura-paris.org/dict/%E5%BA%83%E8%BE%9E%E8%8B%91/prefix/$*"; }
	reverso() { "$BROWSER" "https://context.reverso.net/translation/japanese-english/$*"; }
	qolibri() { unset -f qolibri && qolibri "$@"; }
	kanjijoho() { "$BROWSER" "https://kanjijoho.com/cat/search.html?search=part&getdata=$*"; }
	youglish() { "$BROWSER" "https://youglish.com/pronounce/$*/japanese"; }
	youreijp() { "$BROWSER" "http://yourei.jp/$*"; }
	gooexamples() { "$BROWSER" "https://dictionary.goo.ne.jp/word/$*/example/"; }
	massif() { "$BROWSER" "https://massif.la/ja/search?q=$*"; }
	simplytranslate() { "$BROWSER" "https://simplytranslate.vern.cc/?engine=google&text=$*&sl=ja&tl=en"; }
	most_common_spelling() {
		# rankspellings is an external script from my dotfiles.
		IFS='|▼▽ ,.・、。' read -r -a args <<<"$*"
		if [[ ${#args[@]} -ge 0 ]]; then
			result=$(rankspellings -g "${args[@]}")
			echo "$result" | cut -f1 | head -1 | tr -d '\n' | xclip -selection clipboard
			notify-send "${0##*/} - ${FUNCNAME[0]}" "$result" &
		fi
	}
	furiganainfo() { "$BROWSER" "https://furigana.info/w/$*"; }
else
	thesaurus() { "$BROWSER" "https://www.thesaurus.com/browse/$*"; }
	elsa() { "$BROWSER" "https://elsaspeak.com/en/learn-english/how-to-pronounce/$*"; }
	reverso() { "$BROWSER" "https://context.reverso.net/translation/english-japanese/$*"; }
	another_word_for() { "$BROWSER" "https://www.wordhippo.com/what-is/another-word-for/$*.html"; }
	longman() { "$BROWSER" "https://www.ldoceonline.com/dictionary/$*"; }
	cambridge() { "$BROWSER" "https://dictionary.cambridge.org/us/dictionary/english/$*"; }
	collinsdictionary() { "$BROWSER" "https://www.collinsdictionary.com/search/?dictCode=english&q=$*"; }
	merriam_webster() { "$BROWSER" "https://www.merriam-webster.com/dictionary/$*"; }
	youglish() { "$BROWSER" "https://youglish.com/pronounce/$*/english/us"; }
	pronunciation() {
		local -r searchterm="$*"
		[[ -z "$searchterm" ]] && exit
		cd -- "$tmp_dir" || exit 1

		# Download pronunciations and convert them to opus/ogg
		{
			curl -Ls "https://dictionary.cambridge.org/us/dictionary/english/${searchterm// /-}" |
				grep -o '[^"]*/us_pron[^"]*\.mp3' |
				sed 's,^,https://dictionary.cambridge.org,'
		} | while IFS= read -r link; do
			curl -O "$link"
		done

		for file in ./*.mp3; do
			__convert_to_opus "$file" "${file%.*}.ogg"
		done

		# Format each filename and move files to the collection
		local audiofiles="" file=""
		for file in ./*.ogg; do
			if [[ -s $file ]]; then
				__anki_store_file "$(readlink -f -- "$file")" "$(basename -- "$file")"
				audiofiles="${audiofiles}[sound:$(basename -- "$file")]"
			fi
		done

		if [[ -z "$audiofiles" ]]; then
			notify-send "${0##*/} - ${FUNCNAME[0]}" "Couldn't find anything matching $searchterm." &
			return 1
		else
			echo -n "$audiofiles" | xclip -selection clipboard
			notify-send "${0##*/} - ${FUNCNAME[0]}" "File(s) added to Anki collection. Codes are copied to the clipboard." &
		fi
	}
fi

goldendict() { unset -f goldendict && goldendict "$@"; }

new_bookmark() {
	bookmarkctl new "$*"
}

jisho() {
	# Search words containing the kanji if length == 1.
	# Otherwise search just the word.
	if [[ "${#1}" == 1 ]]; then
		"$BROWSER" "https://jisho.org/search?keyword=*$**"
	else
		"$BROWSER" "https://jisho.org/search?keyword=$*"
	fi
}

dicpixiv() {
	"$BROWSER" "https://dic.pixiv.net/a/$*"
}

clip() { cabl clip; }
torsocks() { unset -f torsocks; torsocks cabl; }

anki_search() {
	local -r request='{
		"action": "guiBrowse",
		"version": 6,
		"params": {
			"query": "<query>"
		}
	}'
	__ankiconnect_request "${request/<query>/$(__escape_json "$*")}"
}
make_anki_card() {
	local request='{
		"action": "guiAddCards",
		"version": 6,
		"params": {
			"note": {
				"deckName": "Default",
				"modelName": "<anki_model>",
				"fields": {
					"<sentence_field>": "<sentence>"
				}
			}
		}
	}'
	request=${request/<sentence_field>/$ANKI_SENTENCE_FIELD}
	request=${request/<anki_model>/$ANKI_MODEL}
	request=${request/<sentence>/$(__escape_json "$1")}
	output=$(__ankiconnect_request "$request" 2>&1) || __report_err "$output"
}
sankaku() {
	"$BROWSER" "https://chan.sankakucomplex.com/post/index?tags=$* order:popular"
}
sankaku_solo() {
	"$BROWSER" "https://chan.sankakucomplex.com/post/index?tags=$* order:popular solo rating:safe"
}
nyaa_search() {
	"$BROWSER" "https://nyaa.land/?q=$*"
}
duckduckgo() {
	"$BROWSER" "https://duckduckgo.com/?q=$*&kp=-2&kl=jp-jp"
}
searx_search() {
	"$BROWSER" "https://xo.wtf/search?q=$*&safesearch=0&categories=general"
}
brave_search() {
	"$BROWSER" "https://search.brave.com/search?q=$*"
}
duckduckgo_images() {
	"$BROWSER" "https://duckduckgo.com/?q=$*&iax=images&ia=images&kp=-2&kl=jp-jp"
}
google_images() {
	"$BROWSER" "https://www.google.co.jp/search?q=$*&tbm=isch"
}
wikipedia() {
	"$BROWSER" "https://wikiless.org/w/index.php?search=$*&lang=$locale#firstHeading"
}
wiktionary() {
	"$BROWSER" "https://${locale}.wiktionary.org/wiki/$*"
}
maps() {
	"$BROWSER" "https://www.openstreetmap.org/search?query=$*"
}
packages() {
	"$BROWSER" "https://archlinux.org/packages/?q=$*" "https://aur.archlinux.org/packages?K=$*"
}
archwiki() {
	"$BROWSER" "https://wiki.archlinux.org/index.php?search=$*"
}
myanimelist() {
	"$BROWSER" "https://myanimelist.net/search/all?q=$*"
}

dlraws() {
	"$BROWSER" "https://dlraw.to/search/${*// /+}/"
}

mangadex() {
	"$BROWSER" "https://mangadex.org/search?q=$*"
}

# Download a streamable video through Tor
# Enable tor - sudo systemctl start tor
echo "$search_text" | grep -Fq "streamable.com" &&
	streamable() { tsp yt-dlp --proxy 'socks5://127.0.0.1:9050/' -f best "$@"; }

# Batch-download all streamable and catbox videos from a thread on 4chan
if echo "$search_text" | grep -Pq 'boards\.4chan(nel)?\.org'; then
	download_4chan_media() {
		cd -- ~/Downloads/ || exit 1
		local -r page=$(curl --socks5-hostname '127.0.0.1:9050' -s "$*" | sed 's,<wbr>,,g')

		grep -Po 'https?://streamable\.com/[a-z0-9]+' <<<"$page" |
			xargs -I{} tsp yt-dlp --proxy 'socks5://127.0.0.1:9050/' -f best "{}"

		grep -Po 'https?://[a-z]+\.catbox\.moe/[a-z0-9]+\.[a-z0-9]{1,5}' <<<"$page" |
			xargs -I{} tsp curl -LO "{}"
	}
	download_4chan_images() {
		local -r thread=$*
		local -r html=$(curl -Ls --max-time 10 "$thread")
		local -r title=$(echo "$html" | grep -Po '<title>\K.*(?=</title>)' | sed 's,/,,g')
		local -r folder=$HOME/Pictures/$title
		local -r urls=$(echo "$html" |
			grep -Po '\w+\.4chan\.org/\w{1,6}/\d+\.(jpg|png|webp)' |
			sort -u |
			awk '{ printf "url = \"%s\"\n-LO\n", $1 }')
		mkdir -p -- "$folder" && cd -- "$folder" || return 1
		tsp curl \
			--parallel \
			--parallel-immediate \
			--parallel-max 10 \
			-w '%{url} %{exitcode}\n' \
			--connect-timeout 10 --max-time 60 \
			--retry 2 \
			--config <(echo "$urls")
	}
fi

command -v zeal >/dev/null && zeal() { unset -f zeal && zeal "$*"; }

man -k "^$search_text$" >/dev/null &&
	manual() { man -Tpdf "$search_text" | zathura -; }

echo "$search_text" | grep -q "^.*@.*\.[A-Za-z]\+$" &&
	email() { xdg-email "$@"; }

command -v qrencode >/dev/null &&
	qrcode() {
		local -r img_path=/tmp/qr.png
		qrencode "$@" -s 10 -o "$img_path" &&
			xclip -sel c -target image/png "$img_path" && xdg-open "$img_path"
	}

if echo "$search_text" | grep -q "/watch?v=\|invidious\|youtube\.com\|youtu\.be\|twitch\.tv/video"; then
	youtubedl() { tsp yt-dlp --add-metadata --write-sub -ic "$@"; }
	audiodl() {
		tsp yt-dlp \
			--add-metadata -ic \
			-x \
			-f bestaudio/best \
			-o '/mnt/archive/audio/ytdl/%(upload_date)s-%(title)s.%(ext)s' "$@"
	}
	mpv() { unset -f mpv && setsid -f mpv "$*"; }
	add_to_impd() { impd add "$*"; }
fi

echo "$search_text" | grep -Pq "instagram\.com|nitter|/status/|bitchute\.com|worldstar\.com/web/video|twitter\." &&
	youtubedl() {
		local -r url=$(sed -E 's,.*/([^\/]+)/status/,https://twitter.com/\1/status/,' <<< "$*")
		tsp torsocks yt-dlp --add-metadata -ic "$url";
	}

if echo "$search_text" | grep -q "^.*\.[A-Za-z]\+.*"; then
	gotourl() { "$BROWSER" "$@"; }
	download() { cd ~/Downloads/ && tsp curl -LO "$@"; }
	linkhandler() { unset -f linkhandler && linkhandler "$@"; }
fi

if [[ $search_text =~ twitter\.com/[^/]*/status/ ]]; then
	download() {
		cd -- ~/Downloads/ &&
			curl -s "$url" |
			grep -F '<meta property="og:image"' |
				grep -Po 'https?://[^"]*' |
				xargs -I{} tsp curl -LO "{}"
	}
fi

__ask_action() {
	declare -F | awk '!/ __.+$/ {gsub("_", " ", $3); print $3}' |
		dmenu -p "Plumb ${search_text:0:30} to?" -i -l 50
}

__main() {
	local pid func

	if [[ -z "$search_text" ]]; then
		echo "Clipboard is empty." >&2 && exit 1
	fi

	pid=$(xprop -id "$(xprop -root | awk '/_NET_ACTIVE_WINDOW\(WINDOW\)/{print $NF}')" | grep -m 1 PID | cut -d " " -f 3)
	for pid in $(pstree -lpA "$pid" | head -1 | grep --color=never -oP '\(\K\d+(?=\))'); do
		cd -- "$(readlink -- "/proc/$pid/cwd")" || continue
		[[ -f "$search_text" ]] && xdg-open "$(readlink -f -- "$search_text")" && exit
		[[ -d "$search_text" ]] && "${TERMINAL:-alacritty}" -e "${FILE:-lf}" "$(readlink -f -- "$search_text")" && exit
	done

	if [[ -n ${func:=$(__ask_action)} ]]; then
		"${func// /_}" "$search_text"
	fi
	rm -rf -- "$tmp_dir"
}

__main
